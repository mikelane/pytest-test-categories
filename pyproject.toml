[tool.poetry]
name = "pytest-test-categories"
version = "0.1.0"
description = "A pytest plugin to enforce test timing constraints and size distributions."
authors = ["Mike Lane <mikelane@gmail.com>"]
packages = [{ include = "pytest_test_categories", from = "src" }]
license = "MIT"

[project]
name = "pytest-test-categories"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: Pytest",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
]

[project.entry-points.pytest11]
test_categories = "pytest_test_categories.plugin"

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
beartype = "^0.19.0"
icontract = "^2.7.1"
pydantic = "^2.10.4"
pytest = "^8.3.4"


[tool.poetry.group.test.dependencies]
pytest-cov = "^6.0.0"
pytest-mock = "^3.14.0"

[tool.poetry.group.lint.dependencies]
isort = "^5.13.2"
pre-commit = "^4.1.0"
ruff = "^0.8.0"
ruff-lsp = "^0.0.59"


[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["it_*.py", "test_*.py"]
python_functions = ["it_*", "test_*"]
python_classes = ["Describe[A-Z]*"]
addopts = ["-s", "-ra", "-q", "-vv", "--cov=src", "--cov-config=pyproject.toml"]
pythonpath = ["src", "tests/plugins"]

filterwarnings = [
    "ignore:Unused async fixture loop scope:pytest.PytestWarning",
    "ignore:The `__fields__` attribute is deprecated:DeprecationWarning",
]

[tool.coverage.run]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "return NotImplemented",
    "if __name__ == .__main__.:",
    "pass",
]

[tool.isort]
line_length = 120
profile = "black"
multi_line_output = 3
force_grid_wrap = 2
include_trailing_comma = true
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
line-length = 120

src = ["src", "tests"]

include = ["*.py"]

exclude = [".git", ".venv", "__pycache__", "build", "dist"]

target-version = "py312"

respect-gitignore = true

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D203", # Don't require 1 blank line before class docstring
    "D213", # Don't require multiline docstring to start at the second line
    "COM812", # Ignore missing trailing commas (conflicts with ruff format)
    "ISC001", # Ignore implicitly concatenated strings (conflicts with ruff format)
]

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
    "D100", # Don't require module docstrings
    "D101", # Don't require class docstrings
    "D102", # Don't require method docstrings
    "S101", # Don't prevent asserts
]
"tests/*" = [
    "D100", # Don't require module docstrings in tests
    "D101", # Don't require class docstrings in tests
    "D102", # Don't require method docstrings in tests
    "D103", # Don't require function docstrings in tests
    "D104", # Don't require init docstrings in tests
]
"tests/_utils/check_coverage.py" = ["T201"] # allow print function in the scripts
"scripts/*" = ["T201"] # allow print function in the scripts
"conftest.py" = ["D100"] # Don't require module docstrings in conftest
"__init__.py" = ["F401"] # allow unused imports in __init__.py

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "double"
docstring-quotes = "double"


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
